1 Установка питон. +
    Чтобы проверить, установлен ли питон  $ python3 --version. Чтобы установить питон, $ sudo apt install python3
2 Установка джанго +
    Создаем первоначальную директорию: $ mkdir djangogirls. Заходим: $ cd djangogirls
    Создаем виртуальное окружение: $ python3 -m venv myvenv. Запуск: $ source myvenv/bin/activate
    Устанавливаем джанго: (myvenv) ~$ python3 -m pip install --upgrade pip
    Установка библиотек через указание требований: создаем файл requirements.txt внутри первоначальной директории
        djangogirls
        └───requirements.txt
    Добавляем текст: Django~=3.2.10
    Установка Django: pip install -r requirements.txt
    Джанго приложение готово!
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------
3 Твой первый проект на Джанго +
    (myvenv) ~/djangogirls$ django-admin startproject mysite
    - Изменяем настройки
        TIME_ZONE = 'Europe/Moscow'
        LANGUAGE_CODE = 'ru-ru'
        STATIC_ROOT = os.path.join(BASE_DIR, 'static')
        ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']
    - Настройка базы данных
    Существует множество различных баз данных, которые могут хранить данные для твоего сайта. Мы будем использовать стандартную — sqlite3.
    - Создание базы данных
        python manage.py migrate.
    - Запуск веб-сервера
        python manage.py runserver
    В настройках mysite можно указываем нужные настройки. После нужно будет создать базу данных для данного проекта. Команда есть выше.
    По умолчанию используется sqlite3

4 Модели джанго
    Нам нужно что-то, что будет хранить все записи нашего блога. Но прежде давай поговорим о вещах, называемых объектами.
    Что такое объекты, модели, база данных
    -Объекты
    Если мы хотим смоделировать кошку, то создадим объект Cat, который обладает определенными свойствами, например, color (цвет), age (возраст),
    mood (настроение: плохое, хорошее, сонное ;)), owner (хозяин, например, другой объект — Person — или, если кошка дикая, это свойство будет пустым).
    - Модели
    Модель в Django — это объект определённого свойства: он хранится в базе данных. База данных представляет собой совокупность различных данных.
    Это то место, где ты будешь хранить информацию о своих пользователях, записях в блоге и т.д.
    Подробнее об моделях джанго по ссылке :  https://djbook.ru/rel1.9/topics/db/models.html

    -Создание приложения
        (myvenv) ~/djangogirls$ python manage.py startapp blog
    После того, как приложение создано, нам нужно сообщить Django, что теперь он должен его использовать. Мы сделаем это с помощью файла mysite/settings.py.
    Нам нужно найти INSTALLED_APPS и добавить к списку 'blog'. Также провести миграцию python manage.py migrate.
    -Создание модели записи в блоге
        В файле blog/models.py мы определяем все Модели — модель записи для блога также пойдёт сюда.
    - Создаём таблицы моделей в базе данных
        Последним шагом будет добавление нашей модели в базу данных. Сначала мы должны дать Django знать, что сделали изменения в нашей модели
        (мы её только что создали!). Набери python manage.py makemigrations blog.
    Django создал для нас файл с миграцией для базы данных. Набери python manage.py migrate blog

    Получается сначала создаем папку в котором у нас будет установлена джанго и виртуальное окружение.
    После создаем сам проект это mysite. После создаём приложение blog.

5  Администрирование Django
    Чтобы добавлять, редактировать и удалять записи, для которых мы только что создали модель, мы используем панель управления администратора Django.
    Давай откроем файл blog/admin.py и заменим его содержимое на:
                                                                    from django.contrib import admin
                                                                    from .models import Post

                                                                    admin.site.register(Post)

    - Создание суперпользователя: python manage.py createsuperuser

 6 Публикация в интернет. GitHub, PythonAnywhere
    Подробнее : https://tutorial.djangogirls.org/ru/deploy/

    До настоящего момента твой сайт был доступен только для локального просмотра, теперь же ты узнаешь, как развернуть его на удалённом сервере!
    Развертывание (deploy) — это процесс публикации приложения в интернете, чтобы люди могли наконец увидеть твое творение :
    Как ты уже знаешь, веб-сайт должен располагаться на сервере. Есть много компаний, предоставляющих сервера в интернете. Мы воспользуемся услугами одной из них,
    с довольно простым процессом публикации: PythonAnywhere. PythonAnywhere бесплатен для маленьких приложений с небольшим числом посетителей.

    Другим внешним сервисом, которым мы воспользуемся, будет GitHub — сервис хостинга кода. практически у каждого программиста есть GitHub аккаунт

    В итоге твой код будет в трёх местах. На локальном компьютере ты будешь заниматься разработкой и тестированием. Когда результат тебя устроит,
    ты загрузишь свою программу на GitHub. А твой сайт будет на PythonAnywhere, и ты сможешь обновлять его, просто загружая новую версию кода с GitHub.

    Установка гит, создание гит репозитория, создание файла gitignore.
    Загрузка кода в репозиторий гитхаб.
    Настройка на PythonAnywhere :

    Чтобы скачать необходимые библиотеки которые нужны в вашем проекте, то:
    pip freeze > requirements.txt
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
7 URL-адресa в Django!
    Подробнее: https://tutorial.djangogirls.org/ru/django_urls/
    Проведем импорт URL-адресов для нашего приложения (apparts) в mysite/urls.py чтобы файл mysite/urls.py был в максимально аккуратном виде.
    Добавляем строку для импорта blog.urls. Обрати, что здесь мы используем функцию include, поэтому тебе придется импортировать её в строке from django.urls....
    айл mysite/urls.py должен выглядеть следующим образом:

                from django.contrib import admin
                from django.urls import path, include

                urlpatterns = [
                    path('admin/', admin.site.urls),
                    path('', include('blog.urls')),
                ]
  ВОПРОСЫ :                                   https://django.fun/docs/django/ru/3.2/ref/contrib/         CONTRIB ПАКЕТЫ
  что такое django.contrib, django.urls , path, include.
  также админ

   Django.contrib - джанго поставляется с множеством дополнительных, необязательных инструментов (contrib пакеты), которые решают общие проблемы веб-разработки.
    Этот код находится в django/contrib в дистрибутиве Django. В этом документе приведена сводка пакетов в contrib.

   Функция path() располагается в пакете django.urls и принимает два параметра: запрошенный адрес URL и функция, которая обрабатывает запрос по этому
   адресу. ... Запрошенный путь должен в точности соответствовать указанному в маршруте адресу URL. Так, в примере выше, что функция views

    Когда Django встречает include() он отрезает совпавшую часть от URL и отправляет оставшуюся часть в подключенные схемы для дальнейшей обработки.

    admin Автоматический административный интерфейс Django

    Паттерн от английского Pattern – образец, шаблон. В программировании это понятие подразумевает использование определенного подхода или алгоритма,
    который уже существует для решения проблемы в той или иной ситуации.

    MTV - Models, Templates, Views

    если исчезло окно терминала и ран , то можно закрепить через View-Appearance-Tool Windows Bar

Создай новый пустой файл blog/urls.py и добавь :
                                                        from django.urls import path
                                                        from . import views

Так мы импортировали функцию path Django и все views (представления) из приложения blog (у нас их пока нет, но через минуту они появятся!)
После этого мы можем добавить наш первый URL-шаблон:
                                                        urlpatterns = [
                                                            path('', views.post_list, name='post_list'),
                                                        ]
                                                        Вспомогательные функции Django¶

Пакет django.shortcuts собирает вспомогательные функции и классы, которые охватывают несколько уровней MVC.
Другими словами, эти функции/классы для удобства вводят управляемую связь.

8 Ведение в HTML
    HTML — это простой код, который может быть интерпретирован твоим браузером
    - Шаблоны сохраняются в директории blog/templates/blog. Для начала создай директорию templates внутри директории blog.
    - Затем создай другую директорию blog внутри директории templates:
    - Теперь создай файл post_list.html (для начала оставь его пустым) внутри директории blog/templates/blog.

9 QuerySet
    QuerySet, по сути, — список объектов заданной модели.
    QuerySet позволяет читать данные из базы данных, фильтровать и изменять их порядок.

    - Интерактивная консоль Django
    Вход: (myvenv) ~/djangogirls$ python manage.py shell
    Выход : exit()

    Импортируем объект Post
    from blog.models import Post
    Всё просто: мы импортируем модель Post из blog.models.
    Давай попробуем получить все записи блога ещё раз:

        >>> Post.objects.all()
        <QuerySet [<Post: my post title>, <Post: another post title>]>

    - Создаем объект
        >>> Post.objects.create(author=me, title='Sample title', text='Test')
    Но у нас есть один недочёт: me. Мы должны передать этой переменной экземпляр модели User, который будет отвечать за автора записи. Как это сделать?

    Давай для начала импортируем модель User:

    >>> from django.contrib.auth.models import User
    Какие пользователи есть в нашей базе данных? Попробуй эту команду:

    >>> User.objects.all()
    <QuerySet [<User: ola>]>
    Это суперпользователь, которого мы создали ранее! Нам нужен его экземпляр:

    >>> me = User.objects.get(username='ola')
    Как ты можешь заметить, мы получили (get) пользователя (User) с именем username 'ola'.

    Теперь мы, наконец, можем создать наш пост:

    >>> Post.objects.create(author=me, title='Sample title', text='Test')
    <Post: Sample title>
    Ура! Хочешь проверить, что всё работает?

    >>> Post.objects.all()
    <QuerySet [<Post: my post title>, <Post: another post title>, <Post: Sample title>]>
    Есть, ещё один пост в списке!

10 Что представляют из себя теги шаблонов?
    Теги шаблонов Django позволяют нам вставлять Python в HTML, так что ты можешь создавать динамические веб-сайты быстрее и проще.
    В предыдущей главе мы передали нашему шаблону список записей в переменной posts. Теперь мы отобразим его в HTML.

    Чтобы вставить переменную в шаблон Django, нам нужно использовать двойные фигурные скобки с именем переменной внутри:

    blog/templates/blog/post_list.html
    {{ posts }}

11 CSS - сделай это красивым
    Каскадные таблицы стилей (англ. Cascading Style Sheets, или сокращённо CSS) — специальный язык, используемый для описания внешнего вида и форматирования сайта,
    написанного на языке разметки (как HTML). Воспринимай это как своего рода макияж для нашей веб-страницы ;)
    - Установка Bootstrap
        Bootstrap this is one из наиболее popular HTML and CSS фреймворков
        For установки Bootstrap you need to add следующие строки в <head> твоего .html файла (blog/templates/blog/post_list.html):

    blog/templates/blog/post_list.html
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.c

    - Статистические файлы в Django
         Статистические файлы - все файлы CSS и изображения, они не изменяются димамически, их содержание не зависит от запроса и будет одинаково для всех пользователей
         Поместили мы её в djangogirls/blog/static
    - Первый CSS файл
         Создаем папку css внутри паки static, затем создаем файл blog.css внутри css.

СОВЕТЫ ОТ СЕНСЕЙЕВ:
    - При создании любого проекта, в начале пишется models.py, регистрируем в admin.py. Указыаем from .models import (название модели, класса)
    Затем пишем логику, что он должен сделать? во view.py. Также должны провести импорт из модели нужную модель, класс.
    остановка во views RENDER.



КАК ДОБАВИТЬ КАТЕГОРИЮ НА САЙТ
    Просто нужно добавить модель Category(Категория) и связать её с моделью Article(Статья).

в файле models.py, где у тебя модель статьи пишешь вот так

# Модель категории
class Category(models.Model):
    name = models.CharField(max_length=64, verbose_name='название')

# Модель статья
class Article(models.Model):
    category = models.ForeignKey(Category, on_delete=models.CASCADE, verbose_name='категория')
    # другие поля ....
)


Остаётся только дополнить admin.py

from .models import Category, Article

class CategoryAdmin(admin.ModelAdmin):
    list_display = ['name']

class ArticleAdmin(admin.ModelAdmin):
    list_display = ['category', ...]

admin.site.register(Category,  CategoryAdmin)
admin.site.register(Article, ArticleAdmin)


17 февраля 2022 года
как выбрать все категории для одного носот